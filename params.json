{"tagline":"WIP; XML<->Object mapper in Ruby with included definitions for standard formats (Atom, RSS, etc)","body":"# Xommelier is an XML Sommelier\r\n\r\n## Overview\r\n\r\nXommelier is an XML Object Mapper. You could describe some namespace (e.g. Atom) in ruby DSL and use it for parsing XML to Ruby objects or for building XML from Ruby objects.\r\n\r\nLook into {Xommelier::Atom}, {Xommelier::Atom::Threading}, and {Xommelier::Atom::History} module for implementation of http://www.w3.org/2005/Atom namespace, Atom Threading, and Feed Paging and Archiving extensions\r\n\r\nXommelier is work in progress: [![Build Status](https://secure.travis-ci.org/alsemyonov/xommelier.png?branch=master)](http://travis-ci.org/alsemyonov/xommelier)\r\n\r\n## Examples with Atom\r\n\r\n```ruby\r\nrequire 'xommelier/atom/full'\r\n```\r\n\r\n### Reading a feed\r\n\r\n```ruby\r\nfeed = Xommelier::Atom::Feed.parse(open('spec/fixtures/feed.atom.xml'))\r\nputs feed.id, feed.title, feed.updated\r\n\r\nfeed.entries do |entry|\r\n  puts feed.id, feed.title, feed.published, feed.updated\r\n  puts feed.content || feed.summary\r\nend\r\n```\r\n\r\n### Building a feed\r\n\r\n```ruby\r\nfeed = Xommelier::Atom::Feed.new\r\nfeed.id = 'http://example.com/blog'\r\nfeed.title = 'Example.com blog'\r\nfeed.complete = Xommelier::Atom::History::Complete.new\r\n\r\nentry = feed.entry = Xommelier::Atom::Entry.new(\r\n  id: 'http://example.com/blog/2012/03/05',\r\n  title: \"Happy Xommelier's day!\",\r\n  updated: 5.days.ago\r\n).tap do |entry|\r\n  entry.link = Xommelier::Atom::Link.new(\r\n    href: entry.id,\r\n    rel:  'alternate',\r\n    type: 'text/html'\r\n  )\r\n  entry.links << Xommelier::Atom::Link.new(\r\n    href:  \"#{entry.id}/comments.atom\",\r\n    rel:   'replies',\r\n    type:  'application/atom+xml',\r\n    count: 5\r\n  )\r\nend\r\n\r\n# Add Comments\r\n3.times do |i|\r\n  feed.entries << Xommelier::Atom::Entry.new(\r\n    id: \"http://example.com/blog/2012/03/05#comment_#{i}\",\r\n    title: ('Hooray! ' * (i + 1)).strip,\r\n    updated: (5 - i).days.ago\r\n  ).tap do |comment|\r\n    comment.in_reply_to = Xommelier::Atom::Threading::InReplyTo.new(\r\n      ref: entry.id,\r\n      href: entry.link.href\r\n    )\r\n  end\r\nend\r\n\r\nputs feed.to_xml\r\n```\r\n\r\nwill output:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<feed xmlns=\"http://www.w3.org/2005/Atom\" xmlns:thr=\"http://purl.org/syndication/thread/1.0\" xmlns:fh=\"http://purl.org/syndication/history/1.0\">\r\n  <id>http://example.com/blog</id>\r\n  <title>Example.com blog</title>\r\n  <fh:complete/>\r\n  <entry>\r\n    <id>http://example.com/blog/2012/03/05</id>\r\n    <title>Happy Xommelier's day!</title>\r\n    <updated>2012-02-29T07:52:51+04:00</updated>\r\n    <link href=\"http://example.com/blog/2012/03/05\" rel=\"alternate\" type=\"text/html\"/>\r\n    <link href=\"http://example.com/blog/2012/03/05/comments.atom\" rel=\"replies\" type=\"application/atom+xml\" thr:count=\"5\"/>\r\n  </entry>\r\n  <entry>\r\n    <id>http://example.com/blog/2012/03/05#comment_0</id>\r\n    <title>Hooray!</title>\r\n    <updated>2012-02-29T07:52:51+04:00</updated>\r\n    <thr:in-reply-to ref=\"http://example.com/blog/2012/03/05\" href=\"http://example.com/blog/2012/03/05\"/>\r\n  </entry>\r\n  <entry>\r\n    <id>http://example.com/blog/2012/03/05#comment_1</id>\r\n    <title>Hooray! Hooray!</title>\r\n    <updated>2012-03-01T07:52:51+04:00</updated>\r\n    <thr:in-reply-to ref=\"http://example.com/blog/2012/03/05\" href=\"http://example.com/blog/2012/03/05\"/>\r\n  </entry>\r\n  <entry>\r\n    <id>http://example.com/blog/2012/03/05#comment_2</id>\r\n    <title>Hooray! Hooray! Hooray!</title>\r\n    <updated>2012-03-02T07:52:51+04:00</updated>\r\n    <thr:in-reply-to ref=\"http://example.com/blog/2012/03/05\" href=\"http://example.com/blog/2012/03/05\"/>\r\n  </entry>\r\n</feed>\r\n```\r\n\r\n### Building from hash\r\n\r\n```ruby\r\nfeed = Xommelier::Atom::Feed.new(\r\n  {\r\n    title: 'Xommelier nest elements',\r\n    subtitle: 'Xommelier is able to build complex objects from very nested hash',\r\n    author: {name: 'Alexander', email: 'al@semyonov.us'},\r\n    updated: Time.utc(2012, 04, 04, 04, 04),\r\n    contributors: [\r\n      {name: 'Ivan', email: 'ivan@example.com'},\r\n      {name: 'Pyotr', email: 'pyotr@example.com'},\r\n      {name: 'Sidor', email: 'sidor@example.com'},\r\n    ],\r\n    entries: [\r\n      {title: 'First article', updated: Time.utc(2012, 01, 01, 01, 01)},\r\n      {title: 'Second article', updated: Time.utc(2012, 02, 02, 02, 02)},\r\n      {title: 'Third article', updated: Time.utc(2012, 03, 03, 03, 03)},\r\n    ]\r\n  }\r\n)\r\n\r\nfeed.author # Xommelier::Atom::Person\r\nfeed.contributors[1] # Xommelier::Atom::Person\r\nfeed.entries[2] # Xommelier::Atom::Entry\r\n\r\nputs feed.to_xml\r\n```\r\n\r\nwill output\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\r\n  <title>Xommelier nest elements</title>\r\n  <subtitle>Xommelier is able to build complex objects from very nested hash</subtitle>\r\n  <author>\r\n    <name>Alexander</name>\r\n    <email>al@semyonov.us</email>\r\n  </author>\r\n  <updated>2012-04-04T04:04:00Z</updated>\r\n  <contributor>\r\n    <name>Ivan</name>\r\n    <email>ivan@example.com</email>\r\n  </contributor>\r\n  <contributor>\r\n    <name>Pyotr</name>\r\n    <email>pyotr@example.com</email>\r\n  </contributor>\r\n  <contributor>\r\n    <name>Sidor</name>\r\n    <email>sidor@example.com</email>\r\n  </contributor>\r\n  <entry>\r\n    <title>First article</title>\r\n    <updated>2012-01-01T01:01:00Z</updated>\r\n  </entry>\r\n  <entry>\r\n    <title>Second article</title>\r\n    <updated>2012-02-02T02:02:00Z</updated>\r\n  </entry>\r\n  <entry>\r\n    <title>Third article</title>\r\n    <updated>2012-03-03T03:03:00Z</updated>\r\n  </entry>\r\n</feed>\r\n```\r\n\r\n## Built in XML namespaces:\r\n\r\n1. {Xommelier::Atom} - http://www.w3.org/2005/Atom\r\n2. {Xommelier::Atom::Threading} - http://purl.org/syndication/thread/1.0\r\n3. {Xommelier::Atom::History} - http://purl.org/syndication/history/1.0\r\n4. {Xommelier::OpenSearch} - http://a9.com/-/spec/opensearch/1.1/\r\n\r\n## TODO\r\n\r\n* Validating built XML against RelaxNG\r\n* Converting XML Schema, RelaxNG, RelaxNG Compact and DTD into Xommelier Ruby DSL\r\n* ActiveRecord-like automatic loading of XML Schema, RelaxNG, RelaxNG Compact and DTD without needing to write it down into ruby code\r\n\r\n## Contributors\r\n\r\n* Artyom Semyonov\r\n\r\nÂ© Alexander Semyonov, 2011-2012. See MIT-LICENSE for details","name":"Xommelier","google":"UA-1497958-7","note":"Don't delete this file! It's used internally to help with page regeneration."}